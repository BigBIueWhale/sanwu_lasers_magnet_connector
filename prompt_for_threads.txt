This is my hello world code for creating a 3d model step file:

```python
# Using Python 3.10.6 and ran: "pip install cadquery==2.4.0 numpy==1.23.5"

# Example using CadQuery to create a cylinder model

import cadquery as cq

# Create a cylinder with height 50mm and radius 10mm
cylinder_model = cq.Workplane("XY").cylinder(50, 10)

# Export the model to an STL file
output_file = "cylinder_model.stl"
cq.exporters.export(cylinder_model, output_file)

output_file
```

I want you to create a full version of this code that entirely produces the final 3d model I want based on my detailed description.

I need the base cylinder to start off being 10mm height and 26mm diameter.

Then put a hole through the shape: 8mm all the way though. This is the hole for the laser light to pass.

The thread standard we're gonna use is:
```txt
ISO Metric Fine Thread DIN 13-3
Pitch mm: 0.5
Nominal Diameter mm: M 11.5
```

On the bottom side I want to turn 3mm height of the base cylinder into a male side of the aforementioned thread standard (remove all excess material).

On the top side I want to drill 6mm deep into the base cylinder a female thread tap of the aforementioned thread standard.

Design it for visuals, so that I can view it in a stl file.

Yes, it's complicated to make these fine ISO threads visually, deal with it.

Use the real standard, don't just guess. You have access to library:
```py
# cq_warehouse library is not available on pypi.org. Instead run:
# python3 -m pip install git+https://github.com/gumyr/cq_warehouse.git#egg=cq_warehouse
# which will print:
# Resolved https://github.com/gumyr/cq_warehouse.git to commit daa46507ecc429c0e2dce11d9d5ffd09b12a42af
# ...
# Successfully installed cq_warehouse-0.8.0
from cq_warehouse.thread import IsoThread
```

which has implementation:
```py
class IsoThread(Solid):
    """ISO Standard Thread

    Both external and internal ISO standard 60° threads as shown in
    the following diagram (from https://en.wikipedia.org/wiki/ISO_metric_screw_thread):

    .. image:: https://upload.wikimedia.org/wikipedia/commons/4/4b/ISO_and_UTS_Thread_Dimensions.svg

    The following is an example of an internal thread with a chamfered end as might
    be found inside a nut:

    .. image:: internal_iso_thread.png

    Args:
        major_diameter (float): Primary thread diameter
        pitch (float): Length of 360° of thread rotation
        length (float): End to end length of the thread
        external (bool, optional): External or internal thread selector. Defaults to True.
        hand (Literal[, optional): Twist direction. Defaults to "right".
        end_finishes (Tuple[ Literal[, optional): Profile of each end, one of:

            "raw"
                unfinished which typically results in the thread
                extended below z=0 or above z=length
            "fade"
                the thread height drops to zero over 90° of arc
                (or 1/4 pitch)
            "square"
                clipped by the z=0 or z=length plane
            "chamfer"
                conical ends which facilitates alignment of a bolt
                into a nut

            Defaults to ("fade", "square").
        simple: Stop at thread calculation, don't create thread. Defaults to False.

    Attributes:
        thread_angle (int): 60 degrees
        h_parameter (float): Value of `h` as shown in the thread diagram
        min_radius (float): Inside radius of the thread diagram

    Raises:
        ValueError: if hand not in ["right", "left"]:
        ValueError: end_finishes not in ["raw", "square", "fade", "chamfer"]

    """

    @property
    def h_parameter(self) -> float:
        """Calculate the h parameter"""
        return (self.pitch / 2) / tan(radians(self.thread_angle / 2))

    @property
    def min_radius(self) -> float:
        """The radius of the root of the thread"""
        return (self.major_diameter - 2 * (5 / 8) * self.h_parameter) / 2

    @property
    def cq_object(self):
        """A cadquery Solid thread as defined by class attributes"""
        warn("cq_object will be deprecated.", DeprecationWarning, stacklevel=2)
        return Solid(self.wrapped)

    def __init__(
        self,
        major_diameter: float,
        pitch: float,
        length: float,
        external: bool = True,
        hand: Literal["right", "left"] = "right",
        end_finishes: Tuple[
            Literal["raw", "square", "fade", "chamfer"],
            Literal["raw", "square", "fade", "chamfer"],
        ] = ("fade", "square"),
        simple: bool = False,
    ):

        self.major_diameter = major_diameter
        self.pitch = pitch
        self.length = length
        self.external = external
        self.thread_angle = 60
        if hand not in ["right", "left"]:
            raise ValueError(f'hand must be one of "right" or "left" not {hand}')
        self.hand = hand
        for finish in end_finishes:
            if finish not in ["raw", "square", "fade", "chamfer"]:
                raise ValueError(
                    'end_finishes invalid, must be tuple() of "raw, square, taper, or chamfer"'
                )
        self.end_finishes = end_finishes
        self.simple = simple
        self.apex_radius = self.major_diameter / 2 if external else self.min_radius
        apex_width = self.pitch / 8 if external else self.pitch / 4
        self.root_radius = self.min_radius if external else self.major_diameter / 2
        root_width = 3 * self.pitch / 4 if external else 7 * self.pitch / 8
        cq_object = Thread(
            apex_radius=self.apex_radius,
            apex_width=apex_width,
            root_radius=self.root_radius,
            root_width=root_width,
            pitch=self.pitch,
            length=self.length,
            end_finishes=self.end_finishes,
            hand=self.hand,
            simple=simple,
        )
        if simple:
            # Initialize with a valid shape then nullify
            super().__init__(Solid.makeBox(1, 1, 1).wrapped)
            self.wrapped = TopoDS_Shape()
        else:
            super().__init__(cq_object.wrapped)
```
